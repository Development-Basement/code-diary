rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
    	match /users/accountInfo {
    		match /public/{userId} {
          allow read: if request.auth.uid != null
          allow create: if isUserWithId(userId) && isUserPublicDocCreateValid()
          allow update: if isUserWithId(userId) && isUserPublicDocUpdateValid()
          allow delete: if false // handled through an api route
        }
    	}
  	}

  	function isUserWithId(userId) {
			return request.auth.uid != null && request.auth.uid == userId
		}

    function isUserPublicDocCreateValid() {
      let hasOnlyValidFields = request.resource.keys.hasOnly(["username", "profileColor"])
    		&& request.resource.keys.hasAll(["username", "profileColor"]);
    	let areTypesCorrect = request.resource.username is string
      	&& request.resource.profileColor is string;
      return hasOnlyValidFields && areTypesCorrect;
    }

    function isUserPublicDocUpdateValid() {
      let hasOnlyValidFields = request.resource.keys.hasOnly(["username", "profileColor"]);
    	let areTypesCorrect = (request.resource.username == null || request.resource.username is string)
      	&& (request.resource.profileColor == null || request.resource.profileColor is string);
      return hasOnlyValidFields && areTypesCorrect;
    }
  }
}
